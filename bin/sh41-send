#!/usr/bin/env sh

# NAME
#  sh41-send - Send a message to an AI provider.
#
# SYNOPSIS
#  sh41-send -t|--to <value> [...provider specific arguments]
#
# STDIN
#  A JSON object containing the SH41 payload.
#
# OPTIONS
#  -t|--to <provider>
#   The provider to send the message to.
#
# ENVIROMENT
#  SH41_PROVIDERS
#   The path to the providers home directory.
#
#  SH41_UTILS
#   The path to the utilities home directory.

# Exit on first error
set -e

# When printing an error's stack trace, use this process' parent id as the stop
# point
export SH41_ROOT_PID="${SH41_ROOT_PID:-$PPID}"

# ╭───┤ Global variables
# ╰─

CMD_NAME="sh41-send"

# ╭───┤ Functions
# ╰─

# Redirect stdin from /dev/tty to ensure it's treated as interactive
# and not inherited from parent's stdin
log_error() { "$SH41_UTILS"/log "$@" "$CMD_NAME" < /dev/tty; }
log_info() { "$SH41_UTILS"/log --type info "$@" "$CMD_NAME" < /dev/tty; }
underline() { "$SH41_UTILS"/stylize underline "$@"; }

# ╭───┤ Argument parsing
# ╰─

while [ "$#" -gt 0 ]; do
  case $1 in
    -t|--to)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        TO="$2"; shift
      else
        log_error "-t|--to flag requires a value"
        exit 1
      fi
      shift
    ;;
    *) break ;;
  esac
done

# ╭───┤ Input validation 
# ╰─

if [ -z "$TO" ]; then
  log_error "Missing required flag -t|--to. Must be first, before other provider specific arguments."
  exit 2
fi

provider_path="${SH41_PROVIDERS}/${TO}"

if [ ! -f "$provider_path" ]; then
  log_error "Provider $(underline "$TO") does not exist. To add a new provider, create a $(underline "$TO") shell file inside providers home: $SH41_PROVIDERS"
  exit 3
fi

# ╭───┤ Main
# ╰─

log_info "Sending prompt to $(underline "$TO") provider..."

"$provider_path" "$@" < /dev/stdin

# provider_response=$("$provider_path" "$@" 2>&1 < /dev/stdin)

# if [ "$?" -ne 0 ]; then
#   log_error "Provider $(underline "$TO") failed with error: $provider_response"
#   exit 4
# fi
