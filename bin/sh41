#!/usr/bin/env sh

# NAME
#  sh41 - An agentic framework for solving problems together with Large Language Models.
#
# SYNOPSIS
#  sh41 conversations [...] 
#  sh41 providers [...]
#  sh41 send [...]
#
# ENVIROMENT
#  <SH41_BIN>
#   Path to SH41 public bin directory.
#
#  <SH41_LIB>
#   Path to SH41 internal lib directory.
#
#  [SH41_DB]
#   Database URI formated as `<db_type>://<connection_string>`, where:
#   - `db_type`: `sqlite` and `postgres`
#   - `://`: separator
#   - `connection_string`: where and how to connect, specific to the `db_type`
#
#  <SH41_ICON>
#   SH41 logo icon
#
# ERRORS
#  1: Missing OS dependency
#  2: Invalid input - parsing error of stdin, argument or flag parsing

# ╭───┤ Bootstrap
# ╰─

# Exit on first error
set -e

# log config
export LOG_NAMESPACE="$SH41_ICON sh41"
# export LOG_LEVEL="$([ -n "$SH41_DEBUG" ] && echo "info" || echo "warn")"

# trap-debug config
export TD_ROOT_PID="$PPID"
export TD_BASE_PATH="$SH41_HOME"

# Expose all internal utility scripts for the duration of the process
export PATH="$SH41_LIB/_scripts:$PATH"

# ╭───┤ Main
# ╰─

export SH41_BIN_SUBCOMMANDS="$SH41_BIN/subcommands"

if [ -n "$SH41_DB" ]; then
  "$SH41_BIN_SUBCOMMANDS/db" health-check
fi

subcommand="$1"; shift
case $subcommand in
  cnv|conversations) "$SH41_BIN_SUBCOMMANDS"/conversations "$@" < /dev/stdin ;;
  pvd|providers) "$SH41_BIN_SUBCOMMANDS"/providers "$@" < /dev/stdin ;;
  db) "$SH41_BIN_SUBCOMMANDS"/db "$@" < /dev/stdin ;;
  *) log error "Unknown subcommand $(stylize u "$subcommand")"; exit 2 ;;
esac
