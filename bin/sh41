#!/usr/bin/env sh

# NAME
#  sh41 - An agentic framework for solving problems together with Large Language Models.
#
# SYNOPSIS
#  sh41 conversations [...] 
#  sh41 providers [...]
#  sh41 send [...]
#
# ENVIROMENT
#  SH41_BIN
#   Path to SH41 public bin directory.
#
#  SH41_LIB
#   Path to SH41 internal lib directory.
#
#  SH41_DB
#   - URI template: <db_type>://<connection_string>
#   - <db_type>: `sqlite` and `postgres`
#   - <connection_string>: 
#
#  SH41_ICON
#   SH41 logo icon
#
# ERRORS
#  1: Invalid input - parsing error of stdin, argument or flag parsing

# ╭───┤ Bootstrap
# ╰─

# Exit on first error
set -e

# log config
export LOG_NAMESPACE="$SH41_ICON sh41"
# export LOG_LEVEL="$([ -n "$SH41_DEBUG" ] && echo "info" || echo "warn")"

# trap-debug config
export TD_ROOT_PID="$PPID"
export TD_BASE_PATH="$SH41_HOME"

# Expose all internal utility scripts for the duration of the process
export PATH="$SH41_LIB/_scripts:$PATH"

export SH41_BIN_SUBCOMMANDS="$SH41_BIN/subcommands"
export SH41_DB_TYPE="${SH41_DB%%://*}"
export SH41_DB_CONNECTION="${SH41_DB#*://}"

# ╭───┤ Functions
# ╰─

# Check database health, only print to stderr if there is an issue
check_db_health() {
  set +e
  db_status=$("$SH41_BIN_SUBCOMMANDS"/db init --health-check 2>&1)
  if [ "$?" -ne 0 ]; then
    echo "$db_status" >&2
    exit 2
  fi
  set -e
}

# ╭───┤ Main
# ╰─

subcommand="$1";
if [ -z "$subcommand" ]; then
  log error "No command provided"
  exit 1
fi
shift

case $subcommand in
  conversations|providers)
    check_db_health
    "$SH41_BIN_SUBCOMMANDS/$subcommand" "$@" < /dev/stdin
  ;;
  init)
    "$SH41_BIN_SUBCOMMANDS"/config init "$@" < /dev/stdin
    "$SH41_BIN_SUBCOMMANDS"/db init "$@" < /dev/stdin
  ;;
  config) "$SH41_BIN_SUBCOMMANDS"/config "$@" < /dev/stdin ;;
  db) "$SH41_BIN_SUBCOMMANDS"/db "$@" < /dev/stdin ;;
  *) log error -v cmd "$subcommand" "Unknown command"; exit 1 ;;
esac
