#!/usr/bin/env sh

# NAME
#  commit-analyzer - Suggest a commit message based on git changes.
#
# STDIN
#  <prompt_template>
#   The prompt template to be used for the AI suggestion. If not provided, a
#   default template will be used.
#
# OPTIONS
#  -f|--file <path>
#   File to be used as context.
#
#  -v|--variable <key> <value>
#   Variable to be interpolated in the prompt template.
#
# DESCRIPTION
#  Use this script in the prepare-commit-msg Git hook to prefill the commit
#  message with an AI-generated suggestion based on the changes made in the
#  commit.
#
# SEE ALSO
#  git(1)

# ╭───┤ Argument parsing
# ╰─

while [ "$#" -gt 0 ]; do
  case $1 in
    -f|--file)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        FILES="$FILES $2"; shift
      else
        log_error "-f|--file flag requires a value"
        exit 1
      fi
      shift
    ;;
    *) break ;;
  esac
done

# ╭───┤ Main
# ╰─

prompt_template=$(cat)

if [ -z "$prompt_template" ]; then
  prompt_template='Based on the provided git-stats, git-diff-changes and other files provided as context, suggest a Semantic Release compatible commit message that best describes the changes made in this commit.'
fi

# Using files, instead of passing as context variables, to avoid issues with
# argument length limits which can be hit when passing large commit diffs
git_stat_tmp=$(mktemp -t git-diff-stat-XXXXXX)
git_changes_tmp=$(mktemp -t git-diff-changes-XXXXXX)

git --no-pager diff --cached --stat > "$git_stat_tmp"
git --no-pager diff --cached > "$git_changes_tmp"

printf "%s" "$prompt_template" \
  | sh41 prompt build \
    --file "$git_stat_tmp" \
    --file "$git_changes_tmp" \
  | sh41 send --to openai --temperature 0.9 --max-tokens 200

