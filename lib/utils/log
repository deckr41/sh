#!/usr/bin/env sh

# NAME
#  log - Print a fancy log message
#
# SYNOPSIS
#  log [-t|--type <value>] [--no-color] <message> [namespace]
#
# DESCRIPTION
#  Print a fancy styled log message to the terminal.
#
#  If the $CI environment variable is set, the message is printed without
#  colors.
#
# OPTIONS
#  [-t|--type <value>]
#   The type of message to print. Possible values are "error", "warning",
#   "info", and "success". Default is "error".
#
# FLAGS
#  [-ns|--no-color]
#   Do not print colors or icons.
#
# ARGUMENTS
#  <message>
#   The message to print. Can be passed as the first argument or as 
#   standard input.
#  
#  [namespace]
#   The namespace of the message
#
# ENVIRONMENT
#  CI
#   If exists, the message is printed without colors.
#  
#  SH41_LOG_DATE_FORMAT
#   The date format to use when printing the log message. Default is
#   "%Y-%m-%d %H:%M:%S".
# 
#  SH41_UTILS
#   The path to the utilities home directory.

# ╭───┤ Global variables
# ╰─

MESSAGE=""
NAMESPACE=""
TYPE="error"
TYPE_COLOR="red"
HAS_COLOR="true"

# ╭───┤ Functions
# ╰─

bold() { "$SH41_UTILS"/stylize bold "$@"; }
color() { "$SH41_UTILS"/color "$@"; }

# Determine and set global style variables
set_style() {
  case $TYPE in
    warning) TYPE_COLOR="yellow"; ;;
    info) TYPE_COLOR="blue"; ;;
    success) TYPE_COLOR="green"; ;;
  esac

  if [ "$CI" = "true" ] || [ -z "$HAS_COLOR" ]; then
    HAS_COLOR=""
  fi
}

print_plain() {
  date_label=$(date "$SH41_LOG_DATE_FORMAT")
  type_label=$(echo "$TYPE" | tr "[:lower:]" "[:upper:]")

  echo "$date_label $type_label $SH41_ICON ${NAMESPACE}${MESSAGE}"
}

print_with_style() {
  date_label=$(date "$SH41_LOG_DATE_FORMAT")
  type_label=$(bold "$(color "$TYPE_COLOR" "$(echo "$TYPE" | tr "[:lower:]" "[:upper:]")")")
  name_label=$(color gray "$SH41_ICON $NAMESPACE: ")

  echo "$date_label $type_label ${name_label}${MESSAGE}"
}

# ╭───┤ Argument parsing
# ╰─

while [ "$#" -gt 0 ]; do
  case $1 in
    -t|--type) TYPE=$2; shift ;;
    -nc|--no-color) HAS_COLOR="" ;;
    *) break ;;
  esac
  shift
done

# ╭───┤ Main
# ╰─

set_style

MESSAGE=$1
NAMESPACE=${2:-$TYPE}

if [ -n "$HAS_COLOR" ]; then
  print_with_style >&2
else
  print_plain >&2
fi
