#!/usr/bin/env sh

# SYNOPSIS
#  build [-f|--file <file_path>] [-v|--var <var_key> <var_value>] [-t|--tag <tag_name>]
#
# DESCRIPTION
#  Build a conversation structure based on a an initial prompt.
#
# OPTIONS
#  -t|--tag <tag_name>
#   A string added to the conversation 'tags' array. 
#
#   The tag name must be alphanumeric, start with a letter and contain only 
#   hyphens and forward slashes.
#
#  -v|--var <var_key> <var_value>
#   A key-value pair where the key can be referenced and interpolated in the
#   prompt via {{ key }}.
#   
#   If a key is not present in the prompt an error is thrown.
#
#   The key must be alphanumeric, start with a letter and contain only
#   hyphens and underscores.
#
#  -f|--file <file_path>
#   A file whose contents are added to the conversation as a separate message
#   using the 'system' role.
#
# EXAMPLES 
#  $ prompt="what is the meaning of life?" 
#  $ echo "$prompt" | sh41-prompt-build 
#  {
#    conversation_id: "uuid",
#    messages: [{ 
#     "role": "user", 
#     "content":"what is the meaning of life?"
#    }]
#  }
#
#  $ prompt="{{ name }}, what is the meaning of life?"
#  $ echo "$prompt" | sh41-prompt-build --var name "John"
#  {
#    conversation_id: "uuid",
#    total_token_count: 9,
#    messages: [{ 
#     "role": "user", 
#     "content":"John, what is the meaning of life?"
#    }]
#  }
#
# ERROR CODES
#  1: Invalid input - parsing error of stdin, argument or flag parsing
#  2: File not found
#  
# SEE ALSO
#  jq(1)

# ╭───┤ Bootstrap
# ╰─

# shellcheck source=../_fn/trap-debug
. "$SH41_LIB/_fn/trap-debug"

# log config
export LOG_NAMESPACE="$SH41_ICON conversations/build"

# ╭───┤ Global variables
# ╰─

PROMPT=$(cat)
CONVERSATION="{
  \"id\": \"$(uuidgen)\",
  \"messages\": [],
  \"tags\": [],
  \"meta\": {}
}"

# ╭───┤ Functions
# ╰─

# Interpolate the given key with a value in the global $INPUT_PROMPT.
#
# ERROR CODES
#  3 variable not found in source string
interpolate_prompt() {
  # Escape the key for use in an awk regex, handling keys that may contain
  # special characters.
  key="$1"
  value="$2"

  # Check for the presence of the key in the template.
  if ! printf '%s' "$PROMPT" | grep -Eq "\{\{\s*$key\s*\}\}"; then
    exit 3
  fi

  # Perform the replacement.
  PROMPT=$(printf '%s' "$PROMPT" \
    | awk -v key="$key" -v val="$value" '{
        gsub(/\{\{\s*'"$key"'\s*\}\}/, val);
        print
      }')
}

# Check if the given key string is valid.
# Must start with a letter, contain only alphanumeric characters, 
# hyphens and underscores.
is_valid_key() {
  printf '%s' "$1" | grep -Eq "^[a-zA-Z][a-zA-Z0-9_-]*$"
}

# Check if the given tag string is valid.
# Must start with a letter, contain only alphanumeric characters, 
# hyphens and forward slashes.
is_valid_tag() {
  printf '%s' "$1" | grep -Eq "^[a-zA-Z][a-zA-Z0-9/-]*$"
}

# ╭───┤ Input validation 
# ╰─

if [ -z "$PROMPT" ]; then
  log error "No prompt provided, expected via stdin"
  exit 1
fi

# ╭───┤ Argument parsing
# ╰─

while [ "$#" -gt 0 ]; do
  case $1 in
    -t|--tag)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        tag=$2; shift
      else
        log error "-t|--tag flag requires a value"
        exit 1
      fi

      if ! is_valid_tag "$tag"; then
        log error "Invalid tag name \"$tag\". Tags must be alphanumeric and contain only hyphens and forward slashes"
        exit 1
      fi

      CONVERSATION=$(printf '%s' "$CONVERSATION" \
        | jq --arg tag "$tag" '.tags += [$tag]')
    ;;
    -f|--file)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        file_path="$2"; shift
      else
        log error "-f|--file flag requires a value"
        exit 1
      fi

      if [ ! -f "$file_path" ]; then
        log error "-f|--file $file_path not found"
        exit 2
      fi

      CONVERSATION=$(printf '%s' "$CONVERSATION" \
        | "$SH41_LIB_CONVERSATIONS"/append --debug --file "$file_path")
    ;;
    -v|--var)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        key=$2; shift
      else
        log error "--var flag requires a key"
        exit 1
      fi

      if ! is_valid_key "$key"; then
        log error "Invalid key name \"$key\". Keys must be alphanumeric, start with a letter and contain only underscores and hyphens"
        exit 1
      fi

      if [ "${2#-}" = "$2" ]; then
        value="$2"; shift
      fi

      interpolate_prompt "$key" "$value"

      # Key not found in prompt, adding data as separate message
      if [ $? -eq 3 ]; then
        CONVERSATION=$(printf '%s' "$CONVERSATION" \
          | "$SH41_LIB_CONVERSATIONS"/append --role "context" --content "$key: $value")
      fi
    ;;
    --) shift; break ;;
    -?*) log error "unknown flag $1"; exit 1 ;;
    *) break ;;
  esac
  shift
done

# ╭───┤ Main
# ╰─

printf '%s' "$CONVERSATION" \
  | "$SH41_LIB_CONVERSATIONS"/append --role "user" --content "$PROMPT"

