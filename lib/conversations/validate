#!/usr/bin/env sh

# DESCRIPTION
#  Internal subcommand for validating a prompt JSON payload based on the
#  SH41 conversation schema.
#
# ERROR CODES
#  1: Invalid input - parsing error of stdin, argument or flag parsing
#  2: Invalid JSON payload - validation error in stdin JSON data
#
# SEE ALSO
#  jq(1)

# ╭───┤ Bootstrap 
# ╰─

# shellcheck source=../_fn/trap-debug
. "$SH41_LIB/_fn/trap-debug"

# log config
export LOG_NAMESPACE="$SH41_ICON conversations/validate"

# ╭───┤ Main
# ╰─

stdin_input=$(cat)
if [ -z "$stdin_input" ]; then
  log error "No input provided, expected JSON payload via stdin"
  exit 1
fi

jq_validation='
  def typeError(field; expectedType): "Invalid type for field: " + field + ". Expected: " + expectedType;
  def notFoundError(key): "Missing field: " + key;
  def notExistsOrEmpty(field): if .[field] == null or .[field] == "" then true else false end;

  if notExistsOrEmpty("id") then
    notFoundError("id")
  elif (.id | type) != "string" then
    typeError("id"; "string")
  elif notExistsOrEmpty("messages") then
    notFoundError("messages")
  elif (.messages | type) != "array" then
    typeError("messages"; "array")
  else
    empty
  end'

error=$(printf "%s" "$stdin_input" \
  | jq --raw-output "$jq_validation")

if [ -n "$error" ]; then
  log error "$error"
  exit 2
fi
