#!/usr/bin/env sh

# NAME
#  send - Send a message to an AI provider.
#
# SYNOPSIS
#  send 
#   -t|--to <provider_name> 
#   -cid|--conversation-id <conversation_id>
#   [-a|--auto-append]
#   [...provider specific arguments]
#
# DESCRIPTION
#  
#  - Provider specific argumest must passed after command options.
#
# OPTIONS
#  -t|--to <provider_name>
#   Name of the provider to send the message to. 
#   If a backend file is not defined for the given provider, an error is
#   thrown.
#
#  -cid|--conversation-id <conversation_id>
#   ID of the conversation who's messages will be sent to the provider, in the
#   order they were created.
#
#  [-a|--auto-append]
#   If set, the response from the provider will be appended as a separate
#   messages to the conversation. Default is "false".
#
# STDIN
#  Standard input can be redirected to "-cid|--conversation-id" field's value
#  by setting if to '@-'. 
#  This is useful when the value is too large to be passed as an argument and
#  when the value is being piped from another command.
#
#  Example:
#   echo "1ac98da8-362f-4916-9fe3-477bf559bb53" \
#     | send provider_name --conversation-id @-
#
# ENVIROMENT
#  SH41_LIB
#   Path to SH41 internal lib directory.
#
#  SH41_PROVIDERS_BACKENDS
#   Path to backends dir, interfaces with the 3rd party LLM providers.

# ╭───┤ Bootstrap
# ╰─

set -e
export LOG_NAMESPACE="$LOG_NAMESPACE.send"

# shellcheck source=../_core/fn/trap-debug
. "$SH41_LIB/_core/fn/trap-debug"
# shellcheck source=../_core/fn/validation-utils
. "$SH41_LIB/_core/fn/validation-utils"

# ╭───┤ Input validation 
# ╰─

cid=""
agent_id=""
messages=""
stdin_data=$(cat)
should_append_to_conversation="true"
provider_slug="openai-gpt4o"

while [ "$#" -gt 0 ]; do
  case $1 in
    -a|--auto-append) should_append_to_conversation="true" ;;
    -na|--no-auto-append) should_append_to_conversation="" ;;

    -jd|--json-data)
      guard_missing_option_value "-jd|--json-data" "$2"
      messages=$2; shift

      if [ "$messages" = "@-" ]; then
        messages=$stdin_data
        guard_missing_option_stdin "-jd|--json-data" "$messages"
      fi
    ;;
    -t|--to)
      guard_missing_option_value "-t|--to" "$2"

      provider_slug=$2; shift
      provider_details=$(db-find-one providers \
        --where "slug='$provider_slug'" \
        --select "backend,model,max_input_token_count,max_input_message_length,max_output_token_count")
      provider_backend=$(echo "$provider_details" | awk -F ',' '{print $1}')
      provider_path="$SH41_PROVIDERS_BACKENDS/$provider_backend"

      if [ ! -f "$provider_path" ]; then
        log error \
          -v to "$provider_slug" \
          -v backend "$provider_backend" \
          -v path "$provider_path" \
          "Provider backend does not exist"
        exit 3
      fi
    ;;
    -cid|--conversation-id)
      guard_missing_option_value "-cid|--conversation-id" "$2"
      cid=$2; shift

      if [ "$cid" = "@-" ]; then
        cid=$stdin_data
        guard_missing_option_stdin "-cid|--conversation-id" "$cid"
      fi
    ;;
    -aid|--as-agent-id)
      guard_missing_option_value "-aid|--as-agent-id" "$2"
      agent_id=$2; shift
    ;;
    *) break ;;
  esac
  shift
done

guard_missing_option "-t|--to" "$provider_slug"

if [ -n "$cid" ] && [ -n "$messages" ]; then
  log error \
    -v to "$provider_slug" \
    -v cid "$cid" \
    "Both -cid|--conversation-id and -jd|--json-data options are set. Only one is allowed."
  exit 2
fi

if [ -z "$cid" ] && [ -z "$messages" ]; then
  log error \
    -v to "$provider_slug" \
    "Either -cid|--conversation-id or -jd|--json-data options must be set."
  exit 2
fi

if [ -n "$cid" ] && [ -z "$agent_id" ]; then
  log error \
    -v to "$provider_slug" \
    -v cid "$cid" \
    "-aid|--as-agent-id is required when -cid|--conversation-id is set."
  exit 2
fi

# ╭───┤ Functions 
# ╰─

remove_long_messages() {
  max_token_count=$1
  max_content_length=$2
  
  log info \
    -v to "$provider_slug" \
    -v messages_count "$(printf "%s" "$messages" | jq -r 'length')" \
    -v max_token_count "$max_token_count" \
    -v max_content_length "$max_content_length" \
    "Analyzing payload sizes..."

  # Each message per line to enable sh level looping
  messages_lines=$(cat | jq --compact-output '.[]')
  # Filtered messages accumulator
  result="[]"
  # Token count accumulator
  total_token_count=0
  # Roughly 4 characters per token for estimating in case `.token_count` not defined
  token_ratio=3
  # Position in the initial array for debugging
  index=0 

  log info \
    -v max_token_count "$max_token_count" \
    -v max_content_length "$max_content_length" \
    "Maximum token count and content length"

  # Using a for-loop instead of a "echo | while read" to avoid subshell
  # visibility issues, which would not allow changing variables from outside
  # it's scope, ie. `total_token_count` or `index`.
  IFS='
'
  for message in $messages_lines; do
    # Check message content length
    content_length=$(printf "%s" "$message" | jq --raw-output '.content | length')
    if [ "$content_length" -gt "$max_content_length" ]; then
      log warn \
        -v index "$index" \
        -v message_content_length "$content_length" \
        -v max_length "$max_content_length"\
        "Message content exceeds maximum length, truncating content..."

      message=$(printf "%s" "$message" \
        | jq --argjson max_length "$max_content_length" \
          '.content |= .[0:$max_length]')
    fi

    # Check overall context token count
    token_count=$(printf "%s" "$message" \
      | jq --raw-output --argjson token_ratio "$token_ratio" \
        '.token_count // .content | length / $token_ratio | ceil')

    log info -v index "$index" \
      -v token_count "$token_count" \
      -v content_length "$content_length" \
      -v total_token_count "$total_token_count" \
      "Message size and token count"

    if [ "$((total_token_count + token_count))" -gt "$max_token_count" ]; then
      log warn \
        -v index "$index" \
        -v message_token_count "$token_count" \
        -v total_token_count "$total_token_count" \
        "Total token count exceeds maximum limit, removing message..."
      # The index must represent the position in the initial array
      index=$((index + 1))
      continue
    fi

    total_token_count=$((total_token_count + token_count))
    index=$((index + 1))

    # Need a temporary file proxy to avoid max argument length issues
    message_tmp=$(mktemp -t "sh41_$provider_slug-message.XXXXXX")
    printf "%s" "$message" > "$message_tmp"
    result=$(printf "%s" "$result" \
      | jq --compact-output --slurpfile message "$message_tmp" '. + $message')
  done

  printf "%s" "$result"
}

append_response() {
  tmp_file=$1
  cid=$2

  log info -v to "$provider_slug" -v cid "$cid" \
    "Adding response to conversation..."

  db-create messages \
    --field conversation_id "$cid" \
    --field agent_id "$agent_id" \
    --field role "user" \
    --field content "@-" \
    < "$tmp_file"
}

# ╭───┤ Main
# ╰─

if [ -n "$cid" ]; then
  log info -v to "$provider_slug" -v cid "$cid" \
    "Fetching conversation messages in weight order..."

  messages=$(db-find-many messages --mode json \
    --where "conversation_id='$cid'" \
    --select "role, content, created_at" \
    --sort "weight ASC")

  if [ -z "$messages" ]; then
    log error "No messages found"
    exit 4
  fi
fi

max_token_count=$(printf "%s" "$provider_details" | awk -F ',' '{print $3}')
max_content_length=$(printf "%s" "$provider_details" | awk -F ',' '{print $4}')
messages=$(printf "%s" "$messages" \
  | remove_long_messages "$max_token_count" "$max_content_length")
provider_model=$(printf "%s" "$provider_details" | awk -F ',' '{print $2}')

log info \
  -v to "$provider_slug" \
  -v messages_count "$(printf "%s" "$messages" | jq -r 'length')" \
  "Sending payload for completion..."

response_tmp=$(mktemp -t "sh41_$provider_slug-response.XXXXXX")
printf "%s" "$messages" \
  | "$provider_path" --model "$provider_model" "$@" \
  | tee "$response_tmp"

# Make sure there's an empty line at the end of the response
echo

if [ -n "$should_append_to_conversation" ] && [ -n "$cid" ]; then
  append_response "$response_tmp" "$cid"
fi

rm "$response_tmp"
