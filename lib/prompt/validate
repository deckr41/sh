#!/usr/bin/env sh

# DESCRIPTION
#  Internal subcommand for validating a prompt JSON payload based on the
#  SH41 conversation schema.
#
# ERROR CODES
#  1 - Input error (argument, flag, option or stdin)
#  2 - JSON validation error 
#
# SEE ALSO
#  jq(1)

# ╭───┤ Input validation 
# ╰─

input=$(cat)
if [ -z "$input" ]; then
  log --type error \
    "No input provided, expected JSON payload via stdin" \
    "sh41-prompt-validate"
  exit 1
fi

# ╭───┤ Main
# ╰─

jq_filter='
  # Reusable predicates
  def isString: type == "string";
  def isArray: type == "array";
  def exists: . != null;

  # Error handlers
  def typeError(field; expectedType): "Invalid type for field: " + field + ". Expected: " + expectedType;
  def notFoundError(key): "Missing key: " + key;

  if .conversation_id | exists | not then
    notFoundError("conversation_id")
  elif .conversation_id | isString | not then
    typeError("conversation_id"; "string")
  elif .messages | exists | not then
    notFoundError("messages")
  elif .messages | isArray | not then
    typeError("messages"; "array")
  else
    empty
  end'
error=$(jq "$jq_filter" < /dev/stdin)

if [ $? -eq 0 ] && [ -z "$error" ]; then
  printf "%s\n" "$input"
else
  printf "%s\n" "$error"
  exit 2
fi

