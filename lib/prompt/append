#!/usr/bin/env sh

# DESCRIPTION
#  Subcommand for adding a new message object to an existing conversation's
#  message array.
#
# SYNOPSIS
#  sh41-prompt append -r|--role <value> -c|--content <value>
#                     -f|--file <value>
#
# OPTIONS
#  -r|--role <value>
#   The role of the message.
#
#  -c|--content <value>
#   The content of the message.
#
# OR 
#
#  -f|--file <value>
#   The path to a file containing the content of the message.
#   Cannot be used together with -r|--role and -c|--content.
#
# ERROR CODES
#  1 - Argument/flag parsing error
#  2 - File not found
#
# SEE ALSO
#  jq(1)

CMD_NAME="sh41-prompt-append"

# ╭───┤ Functions
# ╰─

# Redirect stdin from /dev/tty to ensure it's treated as interactive
# and not inherited from parent's stdin
log_error() { "$SH41_UTILS"/log "$@" "$CMD_NAME" < /dev/tty; }

# ╭───┤ Dependency check
# ╰─

if ! command -v "jq" >/dev/null 2>&1; then
  log_error "jq is required to run this script"
  exit 1
fi

# ╭───┤ Argument parsing
# ╰─

while [ "$#" -gt 0 ]; do
  case $1 in
    -r|--role)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        ROLE="$2"; shift
      else
        log_error "-r|--role flag requires a value"
        exit 1
      fi
    ;;
    -c|--content)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        CONTENT="$2"; shift
      else
        log_error "-c|--content flag requires a value"
        exit 1
      fi
    ;;
    -f|--file)
      if [ "$2" ] && [ "${2#-}" = "$2" ]; then
        FILE_PATH="$2"; shift
      else
        log_error "-f|--file flag requires a value"
        exit 1
      fi
    ;;
    *) log_error "unknown argument $1"; exit 1 ;;
  esac
  shift
done

# ╭───┤ Input validation 
# ╰─

if [ -z "$ROLE" ] && [ -z "$CONTENT" ] && [ -z "$FILE_PATH" ]; then
  log_error "Missing required arguments, use either -r|--role and -c|--content or -f|--file"
  exit 1
fi

if { [ -n "$ROLE" ] || [ -n "$CONTENT" ]; } && [ -n "$FILE_PATH" ]; then
  log_error "-r|--role and -c|--content cannot be used together with -f|--file"
  exit 1
fi

if { [ -n "$ROLE" ] && [ -z "$CONTENT" ]; } || { [ -z "$ROLE" ] && [ -n "$CONTENT" ]; }; then
  log_error "Both -r|--role and -c|--content argumest are required"
  exit 1
fi

if [ -n "$FILE_PATH" ] && [ ! -f "$FILE_PATH" ]; then
  log_error "file $FILE_PATH not found"
  exit 2
fi

# ╭───┤ Main
# ╰─

id=$(uuidgen)

cat \
  | if [ "$FILE_PATH" ]; then
      jq --arg id "$id" --arg path "$FILE_PATH" --rawfile content "$FILE_PATH" \
        '.messages += [{
           id: $id,
           role: "file",
           content: $content,
           path: $path
         }]'
    else
      jq --arg id "$id" --arg role "$ROLE" --arg content "$CONTENT" \
        '.messages += [{
           id: $id,
           role: $role,
           content: $content
         }]'
    fi
