#!/usr/bin/env sh

# SYNOPSIS
#  init [-hc|--health-check]
#
# FLAGS
#  [-hc|--health-check]   
#   Just check if the database connection is working, dont create anything.
#
# ENVIRONMENT
#  SH41_DB_TYPE
#   Type of database to use. Possible values: `sqlite`, `postgres`.
#  
#  SH41_DB_CONNECTION
#   Connection string for the database, depending on the `db_type`.
#
#  SH41_LIB
#   Path to SH41 internal lib directory.
#
# ERRORS
#  1: Invalid input - parsing error of stdin, argument or flag parsing

# ╭───┤ Shield wall!
# ╰─

if [ -z "$SH41_LIB" ]; then
  log error -v var_name "\$SH41_LIB" "Missing environment variable"
  exit 1
fi

# ╭───┤ Bootstrap
# ╰─

# log config
export LOG_NAMESPACE="󱘷 init"

# shellcheck source=../_fn/trap-debug
. "$SH41_LIB/_fn/trap-debug"

# ╭───┤ Functions
# ╰─

check_sqlite() {
  if [ ! -e "$SH41_DB_CONNECTION" ]; then
    log error \
      -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
      "DB does not exist"
    return 2
  fi

  log success \
    -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
    "DB exists"
}

configure_sqlite() {
  mkdir -p "$(dirname "$SH41_DB_CONNECTION")"
  touch "$SH41_DB_CONNECTION"

  if [ ! -e "$SH41_DB_CONNECTION" ]; then
    log error \
      -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
      "DB could not be created"
    return 2
  fi

  log success \
    -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
    "DB created"
}

test_sqlite() {
  if ! sqlite3 "$SH41_DB_CONNECTION" "SELECT name FROM sqlite_master" > /dev/null 2>&1; then
    log error \
      -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
      "DB exists but sqlite3 cannot read it"
    exit 2
  fi

  log success \
    -v "\$SH41_DB_CONNECTION" "$SH41_DB_CONNECTION" \
    "DB exists and sqlite3 can read it"
}

check_postgres() {
  log error "Postgres support is not implemented yet"
  return 2
}

configure_postgres() {
  log error "Postgres support is not implemented yet"
  exit 2
}

test_postgres() {
  log error "Postgres support is not implemented yet"
  exit 2
}

# ╭───┤ Input validation
# ╰─

SHOULD_INIT="true"

while [ "$#" -gt 0 ]; do
  case $1 in
    -hc|--health-check) 
      SHOULD_INIT="" 
      export LOG_NAMESPACE="󱘷 init (health check)"
    ;;
    --) shift; break ;;
    -?*) log error "Unknown flag: $1"; exit 1 ;;
    *) break ;;
  esac
  shift
done

# ╭───┤ Main
# ╰─

case "$SH41_DB_TYPE" in
  sqlite)
    log info -v "\$SH41_DB_TYPE" "$SH41_DB_TYPE" "Sqlite database detected"
    if ! check_sqlite; then
      [ -n "$SHOULD_INIT" ] && configure_sqlite || exit 2
    fi
    test_sqlite
  ;;
  postgres)
    log info -v "\$SH41_DB_TYPE" "$SH41_DB_TYPE" "Postgres database detected"
    if ! check_postgres; then
      [ -n "$SHOULD_INIT" ] &&  configure_postgres || exit 2
    fi
    test_postgres
  ;;
  *)
    log error \
      -v "\$SH41_DB_TYPE" "$SH41_DB_TYPE" \
      -v supported_type "sqlite, postgres" \
      -v "\$SH41_CONFIG_RC" "$SH41_CONFIG_RC" \
      "Invalid type, update \$SH41_DB variable in \$SH41_CONFIG_RC file"
    exit 2
  ;;
esac
