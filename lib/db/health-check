#!/usr/bin/env sh

# SYNOPSIS
#  health-check
#
# ENVIRONMENT
#  <SH41_LIB>
#   Path to SH41 internal lib directory.
#
#  [SH41_DB_TYPE]
#   Type of database to use. Possible values: `sqlite`, `postgres`.
#  
#  [SH41_DB_CONNECTION]
#   Connection string for the database, depending on the `db_type`.
#
#  <SH41_ICON>
#   SH41 logo icon

# log config
export LOG_NAMESPACE="$SH41_ICON db/health-check"

# shellcheck source=../_fn/trap-debug
. "$SH41_LIB/_fn/trap-debug"

# ╭───┤ Functions
# ╰─

check_db_type() {
  if [ -z "$SH41_DB_TYPE" ]; then
    exit 0
  fi

  if [ "$SH41_DB_TYPE" != "sqlite" ] && [ "$SH41_DB_TYPE" != "postgres" ]; then
    log error "Invalid database type: $(stylize underline "$SH41_DB_TYPE").\nSupported values: $(stylize underline "sqlite") and $(stylize underline "postgres")" 
    exit 1
  fi
}

check_sqlite() {
  if ! command -v "sqlite3" >/dev/null 2>&1; then
    log error "sqlite3 is required to run this script"
    exit 1
  fi

  if [ ! -f "$SH41_DB_CONNECTION" ]; then
    log error "Database file does not exist: $(stylize underline "$SH41_DB_PATH")"
    exit 1
  fi

  if ! sqlite3 "$SH41_DB_CONNECTION" "SELECT name FROM sqlite_master WHERE type='table';" >/dev/null 2>&1; then
    log error "Database connection failed"
    exit 1
  fi
}

check_postgres() {
  log error "Postgres support is not implemented yet"
  exit 1
}

# ╭───┤ Main
# ╰─

log info "Database configured for $(stylize underline "$SH41_DB_TYPE")"

check_db_type

case "$SH41_DB_TYPE" in
  sqlite) check_sqlite ;;
  postgres) check_postgres ;;
esac

log success "Database connection successful"
