#!/usr/bin/env sh

# NAME
#  log - Print a fancy log message
#
# SYNOPSIS
#  log [-t|--type <value>] [--no-color] <message> [namespace]
#
# DESCRIPTION
#  Print a fancy styled log message to the terminal.
#
#  If the $CI environment variable is set, the message is printed without
#  colors.
#
# OPTIONS
#  [-t|--type <value>]
#   The type of message to print. Possible values are "error", "warning",
#   "info", and "success". Default is "error".
#
# FLAGS
#  [-ns|--no-color]
#   Do not print colors or icons.
#
# ARGUMENTS
#  <message>
#   The message to print. Can be passed as the first argument or as 
#   standard input.
#  
#  [namespace]
#   The namespace of the message
#
# ENVIRONMENT
#  CI
#   If exists, the message is printed without colors.

# SYNOPSIS
#  _log_plain <message> [namespace]
log_plain() {
  type_label=$(printf "%s" "$TYPE" | tr "[:lower:]" "[:upper:]")

  echo "$(date +%T) $type_label ${NAMESPACE}${MESSAGE}"
}

# SYNOPSIS
#  _log_with_style <message> [namespace]
log_with_style() {
  type_label=$(printf "%s" "$TYPE" | tr "[:lower:]" "[:upper:]")

  case $TYPE in
    error) type_label=$(color red "$type_label") ;;
    warning) type_label=$(color yellow "$type_label") ;;
    info) type_label=$(color blue "$type_label") ;;
    success) type_label=$(color green "$type_label") ;;
  esac

  if [ -n "$NAMESPACE" ]; then
    NAMESPACE=$(color gray "$NAMESPACE")
  fi

  echo "$(date +%T) $(stylize bold "$type_label") ${NAMESPACE}${MESSAGE}"
}

# ╭───┤ Argument parsing
# ╰─

TYPE="error"
HAS_COLOR="true"

while [ "$#" -gt 0 ]; do
  case $1 in
    -t|--type) TYPE=$2; shift ;;
    -nc|--no-color) HAS_COLOR="" ;;
    *) break ;;
  esac
  shift
done

# ╭───┤ Main
# ╰─

MESSAGE=$1
NAMESPACE=${2:+$2: }

if [ -n "$CI" ] || [ -z "$HAS_COLOR" ]; then
  log_plain "$1" "$2" >&2
else
  log_with_style "$1" "$2" >&2
fi
